import React from "react";
import CardPortfolio from "./CardPortfolio";
import styled from "styled-components";

const Wrapper = styled.div`
  background: #f6f6f6;
  padding: 40px 0;
  box-shadow: 0 0 0 100vmax #f6f6f6;
  clip-path: inset(0-100vmax);

  h2 {
   font-size: 35px;
    margin: 0 0 50px 0;
  }
  div {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
    flex-direction: column;
  }
`;

const portfolio = {
  designProject: {
    title: `IC "Repair Design Project"`,
    link: "https://maxim-bekish.github.io/design-studio/",
    url: require(`../../png/dising.png`),
    description: [
      "При разработке моего проекта я использовал макет, созданным в Figma, чтобы точно воплотить задуманный дизайн. Для стилизации элементов я применил препроцессор SCSS, что упростило процесс написания и поддержки CSS кода.",
      "Особое внимание я уделил использованию семантических тегов, что помогло создать структурированный и легко читаемый код, как для меня, так и для других разработчиков.",
      "Адаптивность моего проекта обеспечена благодаря использованию медиа-запросов. Это позволило моему сайту прекрасно выглядеть и работать на устройствах с разными разрешениями экранов, от мобильных устройств до настольных компьютеров.",
      "Одним из интересных элементов моего проекта является слайдер, реализованный с помощью JavaScript. Этот функционал добавляет интерактивность и делает пользовательский опыт более увлекательным и удобным.",
      "В итоге, благодаря использованию SCSS, семантических тегов, медиа-запросов и JavaScript, мой проект представляет собой современное и адаптивное веб-приложение с привлекательным дизайном и интерактивным функционалом.",
    
    ],
  },
  youTalk: {
    title: `YouTalk`,
    link: "https://maxim-bekish.github.io/youtalk/",
    url: require(`../../png/youtalk.png`),
    description: [
      "При верстке моего проекта я активно использовал макет, созданный в Figma, чтобы точно воспроизвести дизайн. Мой подход к верстке основан на чистом CSS с применением гибких техник, таких как гриды и флексбокс.",
      "Я уделил особое внимание использованию семантических тегов, таких как <header>, <nav>, <section>, <article>, <footer>, чтобы структура моего кода была понятной и легко читаемой как для разработчиков, так и для поисковых систем.",
      "Использование гридов и флексбокса позволило мне создать адаптивную верстку, которая легко адаптируется под различные устройства и разрешения экранов. Я также использовал псевдоклассы, чтобы добавить интерактивные эффекты.",
      "Моя цель заключалась в том, чтобы обеспечить максимальную доступность и удобство использования моего сайта на всех устройствах, от больших настольных мониторов до мобильных телефонов. В результате моя верстка адаптирована под все устройства и предоставляетприятный и интуитивно понятный интерфейс.",
    ],
  },
  chart: {
    title: `Chart (React)`,
    link: "https://test-maxim-bekish.vercel.app/",
    url: require(`../../png/chart.png`),
    description: [
      "В процессе разработки моего проекта я решил использовать функциональные компоненты в React. Я выбрал этот подход, потому что он делает мой код более модульным и легким для понимания.",
      "Когда я начал верстать макет, созданный в Figma, я стремился сохранить его структуру и внешний вид. Я уделил особое внимание использованию семантических тегов, чтобы улучшить доступность моего сайта для пользователей и поисковых систем.",
      "Интеграция SVG-графики добавила интересные визуальные элементы в мой проект. Я считаю, что это сделало мой сайт более привлекательным и пользовательски ориентированным.",
      "Чтобы добавить интерактивности, я использовал JavaScript для настройки процентов и работы с SVG. Это позволяет моим пользователям более активно взаимодействовать с моим приложением, делая его более привлекательным и функциональным.",
    ],
  },
  snack: {
    title: `Snake (Game)`,
    link: "https://snack-js.vercel.app/",
    url: require(`../../png//snack.png`),
    description: [
      "Когда я начинал создавать игру 'Snake', моя главная цель была сделать ее интересной и визуально привлекательной. Я решил использовать элемент <canvas>, чтобы создать игровое поле, на котором змейка и ягоды будут двигаться и отображаться.",
      "После того, как я настроил основную структуру игры с помощью HTML и CSS, я приступил к написанию JavaScript-кода, который управляет всей логикой и визуализацией игрового процесса.",
      "Одним из самых интересных аспектов было добавление возможности настройки скорости змейки. Я создал выпадающий список с тремя уровнями сложности: 'lite', 'normal и 'hard'. Каждый из этих вариантов определяет скорость движения змейки, делая игру более или менее вызывающей.",
      "Чтобы игрок мог сохранить свое имя и лучший результат, я воспользовался локальным хранилищем браузера. Каждый раз, когда игрок завершает игру, я сохраняю его имя и счет, чтобы он мог вернуться к игре и посмотреть свои достижения в любое время.",
      "Все эти моменты сделали игру 'Snake' более привлекательной и персонализированной. Это был увлекательный процесс создания, во время которого я старался сделать игру максимально увлекательной и интересной для всех игроков",
    ],
  },
  todo: {
    title: `To-do list(react)`,
    link: "https://to-do-app-chi-eight.vercel.app/",
    url: require(`../../png/todoList.png`),
    description: [
      "При разработке todo list я использовал React и функциональные компоненты для создания чистого и компактного кода. Верстка была выполнена 'пиксель-перфект' по макету, а для стилизации компонентов я применил как стандартные CSS правила, так и библиотеку styled-components.",
      "Для добавления красивого и удобного интерфейса я воспользовался библиотекой antd, которая предоставляет готовые компоненты для React, ускоряя процесс разработки.",
      "Особенностью todo list стал выбор между дневной и ночной темой, реализованный с использованием useContext для передачи текущей темы в приложении.",
      "Кроме текстовых задач, я добавил возможность добавления числовых значений, выбора из выпадающего списка и использование чекбокса. Для каждого типа данных были созданы соответствующие компоненты.",
      "Итоговый todo list стал удобным и функциональным приложением для управления задачами. Этот проект помог мне улучшить навыки работы с React и применить современные подходы к разработке веб-приложений.",
    ],
  },
};

const Portfolio = function () {
  return (
    <Wrapper id="portfolio">
      <h2>Portfolio</h2>
      <div>
        <CardPortfolio props={portfolio.designProject} />
        <CardPortfolio props={portfolio.youTalk} />
        <CardPortfolio props={portfolio.chart} />
        <CardPortfolio props={portfolio.snack} />
        <CardPortfolio props={portfolio.todo} />
      </div>
    </Wrapper>
  );
};

export default Portfolio;
